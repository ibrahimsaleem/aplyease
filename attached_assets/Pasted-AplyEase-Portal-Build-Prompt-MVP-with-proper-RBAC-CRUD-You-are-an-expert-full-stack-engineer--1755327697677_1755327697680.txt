AplyEase Portal – Build Prompt (MVP with proper RBAC & CRUD)
You are an expert full-stack engineer. Build a production-ready multi-tenant web app called AplyEase Portal for aplyease.com.

Goal
A simple, fast portal where Admin, Client, and Employee log in to track job applications. Keep the data model minimal on purpose: two tables only—users and job_applications. Everything else is derived.

Tech (choose a common modern stack and wire it end-to-end)
Web app with SSR: Next.js or Django (your choice), typed where possible.

DB: PostgreSQL with migrations.

ORM: Prisma / SQLAlchemy.

Auth: email+password with sessions/JWT; password reset; role-based access control (RBAC).

Styling: clean, responsive dashboard UI; table with sticky header, filters, pagination, CSV export.

Deploy-ready: .env template, seed script, Dockerfile.

Roles & Permissions
Admin

Full CRUD on users and job_applications.

Can delete any job application.

Can create/disable users and assign role = ADMIN | CLIENT | EMPLOYEE.

Can see per-employee and per-client summaries.

Employee

Can create job applications for any client (select client from dropdown).

Can view and edit only applications where employee_id = self.

Cannot delete applications they don’t own; cannot view other employees’ applications.

Client

Read-only table of all applications where client_id = self.

Can filter, sort, paginate, and export CSV.

No create/update/delete.

Database (two tables exactly)
1) users
id UUID PK

name text NOT NULL

email text UNIQUE NOT NULL

role enum('ADMIN','CLIENT','EMPLOYEE') NOT NULL

company text NULL

is_active boolean DEFAULT true

password_hash text NOT NULL

created_at timestamptz DEFAULT now()

Indexes: email, (role, is_active)

2) job_applications
Mirrors the sheet columns you’ll see in the screenshot (Date Applied, Applied by, Job, Company, Location, Portal, Link, Job Page, Resume, Status, Mail) and ties each record to a client and the employee who applied.

id UUID PK

client_id UUID NOT NULL -- FK → users(id) where users.role='CLIENT'

employee_id UUID NOT NULL -- FK → users(id) where users.role='EMPLOYEE'

date_applied date NOT NULL

applied_by_name text NOT NULL -- from sheet “Applied by” (redundant for display)

job_title text NOT NULL -- “JOB”

company_name text NOT NULL -- “COMPANY”

location text -- “LOCATION”

portal_name text -- “PORTAL” e.g., JobRight

job_link text -- “LINK”

job_page text -- “JOB PAGE”

resume_url text -- “RESUME” (Google Drive URL)

status enum('Applied','Screening','Interview','Offer','Hired','Rejected','On Hold') DEFAULT 'Applied'

mail_sent boolean DEFAULT false -- sheet “MAIL” (Yes/No → boolean)

notes text -- optional freeform

created_at timestamptz DEFAULT now()

updated_at timestamptz DEFAULT now()

Indexes: (client_id), (employee_id), (status), (date_applied DESC)

Constraint: client_id and employee_id must reference existing users with the correct roles.

Seed Data (optional)
Create one Admin, one Client (“Arshad” as a demo client), and one Employee.

Insert 5–10 sample job_applications using the columns above.

Pages & UX
Auth
/login, /logout, /forgot-password.

Admin-only route guard for user management.

Admin Dashboard
KPIs: total jobs, by status, by company.

Users table: search, filter by role, add/disable user, set role.

All Applications table:

Columns: Date Applied, Employee, Client, Job Title, Company, Location, Portal, Link, Job Page, Resume, Status, Mail, Actions.

Filters: date range, client, employee, company, status, portal; full-text search on job/company.

Actions: view, edit, delete.

Export CSV of current filter.

Employee detail view: shows applications for that employee.

Client detail view: shows applications for that client.

Employee Dashboard
My Applications table (only rows where employee_id = self) with the same columns/filters.

Add Application form with client dropdown and all fields; validate URLs, require date_applied, job_title, company_name, client_id.

Can edit only their own rows; cannot change employee_id after create.

Client Dashboard
Applications for Me table (only rows where client_id = self), read-only.

Filters & CSV export.

Links open in new tab.

Table Behavior
Sticky header, horizontal scroll for small screens.

Client-side column sort; server-side pagination.

Badge styling for status; boolean chip for mail_sent.

API (REST example; protect with auth & role checks)
POST /auth/login, POST /auth/logout, POST /auth/forgot-password

Users (Admin only): GET/POST/PATCH /users, PATCH /users/:id/disable

Applications:

Admin: GET/POST/PATCH/DELETE /applications

Employee: GET /applications?employee_id=self, POST /applications, PATCH /applications/:id (only own), no DELETE of others

Client: GET /applications?client_id=self (read-only)

CSV export endpoints mirror current filters.

Validation & Security
Server-side schema validation for every payload.

URL fields must be valid http(s) URLs.

Enforce role constraints on every route.

Protect against IDOR: never accept raw client_id/employee_id changes unless permitted.

Rate-limit auth endpoints; hash passwords with bcrypt/argon2.

CORS locked to aplyease.com in production.

Observability & DX
Basic request logging.

Error boundary UI + toasts.

DB migrations and seed script (npm run migrate && npm run seed or Django equivalent).

Acceptance Criteria
Three roles work exactly as specified (try to “break” access—should be blocked).

Employee can create/edit only their rows; must select a valid Client.

Client sees only their rows; export produces a CSV with the visible columns.

Admin can view, edit, delete any application; can manage users and roles.

Filters (date range, status, client, employee, company, portal) and full-text search work together.

All links (Link, Job Page, Resume) open in a new tab.

Mobile-friendly tables; pagination persists filters in the URL.

Nice-to-Have (if time permits, behind a feature flag)
CSV bulk import (columns: Date Applied, Applied by, Job, Company, Location, Portal, Link, Job Page, Resume, Status, Mail, Client, Employee).

Email notification to Client when a new application is added for them.

Simple audit trail columns already included (created_at, updated_at).

Notes/assumptions I enforced (so it actually works)
Kept only two tables as you asked; used role in users and dual FKs in job_applications to avoid extra tables.

mail_sent is a boolean (from your sheet’s “Yes/No”).

status is an enum; you can adjust the set later without breaking UX.